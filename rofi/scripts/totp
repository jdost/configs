#!/usr/bin/env bash

set -euo pipefail

TOTP_CACHE=$XDG_CACHE_HOME/ykman_totp
REFRESH="Refresh list"

fail() {  # output failure message and fail
   echo ${1:-'Something went wrong.'}
   exit ${2:-1}
}
debug() {  # dump text to stderr
   echo ${1:-} >&2
}
message() {  # dump a message to the rofi message bar
   echo -en "\0message\x1f$1\n"
}

list() {  # dump list of TOTP tokens with standard prefix
   if [[ -e "$TOTP_CACHE" ]]; then
      cat $TOTP_CACHE
      return
   fi

   if ! which ykman &> /dev/null; then
      return
   elif [[ -z "$(ykman list 2> /dev/null)" ]]; then
      return
   fi

   ykman oath list > $TOTP_CACHE
   cat $TOTP_CACHE
}

get() {  # retrieve the current TOTP as passed in
   local target=${1:-}
   [ -z "$target" ] && fail 'Need a TOTP token to generate a code for'
   ykman oath code -s "$target"
}

copy() {  # temporarily populate the clipboard with the value
   local value=${1:-}
   [ -z "$value" ] && fail 'Nothing to copy'
   local time_window=${2:-30}
   local prvs=$(xclip -selection 'clipboard' -out)

   coproc (
      echo "$value" \
         | xclip -in -selection 'clipboard'
      sleep $time_window
      echo "$prvs" \
         | xclip -in -selection 'clipboard'
   )
}
output() {  # output a value to the display after a short wait
   local value=${1:-}
   [ -z "$value" ] && fail 'Nothing to output'
   local time_window=${2:-1}

   coproc (
      sleep $time_window
      local windowid=$(xdotool getactivewindow)
      xdotool type --clearmodifiers --window $windowid --delay 5 -- $value
   )
}

ACTION="${1:-}"
if [[ -z "$ACTION" ]]; then
   list
   echo "$REFRESH"
elif [[ "$ACTION" == "$REFRESH" ]]; then
   rm $TOTP_CACHE
   list
elif [[ "$ACTION" =~ ^\>\> ]]; then
   message "Got action: $ACTION"
   # Trim off the prefix symbols
   ACTION="$(echo $ACTION | cut -d' ' -f2-)"
   # Retrieve the suffix, which is after 3 words, either "Input to window" or
   #  "Place in clipboard", then strip off the first and last character (the [] that
   #  wrap the target
   TARGET="$(echo $ACTION \
               | cut -d' ' -f4- \
               | cut -c2- \
               | rev \
               | cut -c2- \
               | rev)"
   SECRET=$(get $(echo $TARGET | cut -d' ' -f2-))

   if [[ "$ACTION" =~ ^Input ]]; then
      output $SECRET
   elif [[ "$ACTION" =~ ^Place ]]; then
      copy $SECRET
   else
      echo "oops"
   fi
elif [[ "$ACTION" == "oops" ]]; then
   exit
else
   message "Requested: $ACTION"
   echo ">> Input to window [$ACTION]"
   echo ">> Place in clipboard [$ACTION]"
fi
